{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/jithinjacob/Desktop/zaakiy/frontend/src/stores/customizeStore.ts"],"sourcesContent":["import { create } from \"zustand\";\nimport { devtools } from \"zustand/middleware\";\nimport type {\n  ChatbotInfo,\n  UploadFile,\n  ConversationInfo,\n} from \"@/types/schemaTypes\";\nimport type {\n  ContextConfig,\n  PerformanceMetrics,\n  ChatResponse,\n} from \"@/app/api/routes\";\nimport type { User } from \"@supabase/supabase-js\";\nimport { chatbotApi, conversationApi, uploadsApi } from \"@/app/api/routes\";\nimport { toast } from \"sonner\";\n\n// Define the store state interface\ninterface CustomizeState {\n  // Loading states\n  loading: boolean;\n  saving: boolean;\n  analyticsLoading: boolean;\n  uploading: boolean;\n\n  // UI state\n  activeTab: string;\n  showCreateForm: boolean;\n  showEmbedModal: boolean;\n  isEditMode: boolean;\n\n  // User and organization data\n  currentUser: User | null;\n  orgChatbots: ChatbotInfo[];\n  selectedChatbot: ChatbotInfo | null;\n\n  // Upload and embed data\n  uploads: UploadFile[];\n  embedCode: string;\n\n  // Analytics and performance\n  performanceMetrics: PerformanceMetrics | null;\n  conversations: ConversationInfo[];\n\n  // Deletion state\n  deletingChatbotId: string | null;\n\n  // Configuration\n  contextConfig: ContextConfig;\n  config: ChatbotInfo;\n\n  // Error states\n  error: string | null;\n  connectionStatus: \"connected\" | \"disconnected\" | \"checking\" | \"partial\";\n\n  // Chat state\n  chatMessages: ChatResponse[];\n  currentConversationId: string | null;\n\n  // Basic Actions\n  setLoading: (loading: boolean) => void;\n  setSaving: (saving: boolean) => void;\n  setActiveTab: (activeTab: string) => void;\n  setShowCreateForm: (showCreateForm: boolean) => void;\n  setShowEmbedModal: (showEmbedModal: boolean) => void;\n  setIsEditMode: (isEditMode: boolean) => void;\n  setAnalyticsLoading: (analyticsLoading: boolean) => void;\n  setUploading: (uploading: boolean) => void;\n  setCurrentUser: (currentUser: User | null) => void;\n  setError: (error: string | null) => void;\n  setConnectionStatus: (\n    status: \"connected\" | \"disconnected\" | \"checking\"\n  ) => void;\n\n  // Data Actions\n  setOrgChatbots: (orgChatbots: ChatbotInfo[]) => void;\n  setSelectedChatbot: (selectedChatbot: ChatbotInfo | null) => void;\n  setUploads: (uploads: UploadFile[]) => void;\n  setEmbedCode: (embedCode: string) => void;\n  setPerformanceMetrics: (\n    performanceMetrics: PerformanceMetrics | null\n  ) => void;\n  setDeletingChatbotId: (deletingChatbotId: string | null) => void;\n  setConversations: (conversations: ConversationInfo[]) => void;\n  setChatMessages: (messages: ChatResponse[]) => void;\n  setCurrentConversationId: (id: string | null) => void;\n\n  // Configuration Actions\n  setContextConfig: (contextConfig: ContextConfig) => void;\n  updateContextConfig: (updates: Partial<ContextConfig>) => void;\n  setConfig: (config: ChatbotInfo) => void;\n  updateConfig: (updates: Partial<ChatbotInfo>) => void;\n\n  // Enhanced Async Actions\n  loadChatbots: () => Promise<void>;\n  loadUploads: () => Promise<void>;\n  loadContextConfig: () => Promise<void>;\n  loadPerformanceMetrics: (days?: number) => Promise<void>;\n  createChatbot: (config: ChatbotInfo) => Promise<ChatbotInfo | null>;\n  updateChatbot: (\n    chatbotId: string,\n    config: ChatbotInfo\n  ) => Promise<ChatbotInfo | null>;\n  deleteChatbot: (chatbotId: string) => Promise<void>;\n  saveContextConfig: (updates: Partial<ContextConfig>) => Promise<void>;\n  uploadFile: (file: File, type: string) => Promise<UploadFile | null>;\n  generateEmbedCode: (chatbotId: string) => string;\n  testConnection: () => Promise<boolean>;\n\n  // Utility Actions\n  resetState: () => void;\n  initializeStore: (retryCount?: number) => Promise<void>;\n}\n\n// Default context configuration\nconst defaultContextConfig: ContextConfig = {\n  org_id: \"\",\n  config_name: \"default\",\n  initial_retrieval_count: 20,\n  semantic_rerank_count: 10,\n  final_context_chunks: 5,\n  max_context_length: 4000,\n  enable_query_rewriting: true,\n  max_query_variants: 3,\n  conversation_context_turns: 3,\n  retrieval_strategy: \"hybrid\",\n  semantic_weight: 0.6,\n  keyword_weight: 0.4,\n  model_tier: \"balanced\",\n  embedding_model: \"text-embedding-3-small\",\n  rerank_model: \"gpt-3.5-turbo\",\n  enable_semantic_rerank: true,\n  enable_hallucination_check: true,\n  enable_source_verification: true,\n  confidence_threshold: 0.7,\n  max_response_time_ms: 5000,\n  enable_caching: true,\n  cache_ttl_minutes: 60,\n  domain_filters: {},\n  business_context: \"\",\n  specialized_instructions: \"\",\n  enable_detailed_logging: true,\n  log_user_queries: true,\n  collect_feedback: true,\n  created_at: \"\",\n  updated_at: \"\",\n};\n\n// Default chatbot configuration\nconst defaultConfig: ChatbotInfo = {\n  id: \"\",\n  name: \"\",\n  description: \"\",\n  color_hex: \"#6a8fff\",\n  tone: \"helpful\",\n  behavior: \"Be helpful and informative while maintaining professionalism\",\n  system_prompt: \"\",\n  greeting_message:\n    \"Hello! I'm your INNOVZ AI Assistant. How can I help you today?\",\n  fallback_message:\n    \"I apologize, but I don't have enough information to answer that accurately. Could you please rephrase or provide more context?\",\n  ai_model_config: {\n    model: \"gpt-4\",\n    temperature: 0.7,\n    max_tokens: 1000,\n  },\n  is_active: true,\n  chain_status: \"ready\",\n  trainer_at: \"\",\n  created_at: \"\",\n  status: \"active\",\n  deployment_config: {\n    url: \"\",\n    headers: {},\n    method: \"POST\",\n  },\n  avatar_url: \"\",\n};\n\n// Create the Zustand store\nexport const useCustomizeStore = create<CustomizeState>()(\n  devtools(\n    (set, get) => ({\n      // Initial state\n      loading: true,\n      saving: false,\n      activeTab: \"basic\",\n      showCreateForm: false,\n      showEmbedModal: false,\n      isEditMode: false,\n      analyticsLoading: false,\n      uploading: false,\n\n      currentUser: null,\n      error: null,\n      connectionStatus: \"checking\",\n\n      orgChatbots: [],\n      selectedChatbot: null,\n      uploads: [],\n      embedCode: \"\",\n      performanceMetrics: null,\n      conversations: [],\n      deletingChatbotId: null,\n\n      contextConfig: defaultContextConfig,\n      config: defaultConfig,\n      chatMessages: [],\n      currentConversationId: null,\n\n      // Basic Actions\n      setLoading: (loading) => set({ loading }, false, \"setLoading\"),\n      setSaving: (saving) => set({ saving }, false, \"setSaving\"),\n      setActiveTab: (activeTab) => set({ activeTab }, false, \"setActiveTab\"),\n      setShowCreateForm: (showCreateForm) =>\n        set({ showCreateForm }, false, \"setShowCreateForm\"),\n      setShowEmbedModal: (showEmbedModal) =>\n        set({ showEmbedModal }, false, \"setShowEmbedModal\"),\n      setIsEditMode: (isEditMode) =>\n        set({ isEditMode }, false, \"setIsEditMode\"),\n      setAnalyticsLoading: (analyticsLoading) =>\n        set({ analyticsLoading }, false, \"setAnalyticsLoading\"),\n      setUploading: (uploading) => set({ uploading }, false, \"setUploading\"),\n      setCurrentUser: (currentUser) =>\n        set({ currentUser }, false, \"setCurrentUser\"),\n      setError: (error) => set({ error }, false, \"setError\"),\n      setConnectionStatus: (connectionStatus) =>\n        set({ connectionStatus }, false, \"setConnectionStatus\"),\n\n      // Data Actions\n      setOrgChatbots: (orgChatbots) =>\n        set({ orgChatbots }, false, \"setOrgChatbots\"),\n      setSelectedChatbot: (selectedChatbot) =>\n        set({ selectedChatbot }, false, \"setSelectedChatbot\"),\n      setUploads: (uploads) => set({ uploads }, false, \"setUploads\"),\n      setEmbedCode: (embedCode) => set({ embedCode }, false, \"setEmbedCode\"),\n      setPerformanceMetrics: (performanceMetrics) =>\n        set({ performanceMetrics }, false, \"setPerformanceMetrics\"),\n      setDeletingChatbotId: (deletingChatbotId) =>\n        set({ deletingChatbotId }, false, \"setDeletingChatbotId\"),\n      setConversations: (conversations) =>\n        set({ conversations }, false, \"setConversations\"),\n      setChatMessages: (chatMessages) =>\n        set({ chatMessages }, false, \"setChatMessages\"),\n      setCurrentConversationId: (currentConversationId) =>\n        set({ currentConversationId }, false, \"setCurrentConversationId\"),\n\n      // Configuration Actions\n      setContextConfig: (contextConfig) =>\n        set({ contextConfig }, false, \"setContextConfig\"),\n      updateContextConfig: (updates) =>\n        set(\n          (state) => ({\n            contextConfig: { ...state.contextConfig, ...updates },\n          }),\n          false,\n          \"updateContextConfig\"\n        ),\n\n      setConfig: (config) => set({ config }, false, \"setConfig\"),\n      updateConfig: (updates) =>\n        set(\n          (state) => ({\n            config: { ...state.config, ...updates },\n          }),\n          false,\n          \"updateConfig\"\n        ),\n\n      // Enhanced Async Actions with better error handling\n      loadChatbots: async () => {\n        try {\n          set({ loading: true, error: null });\n          const chatbots = await chatbotApi.getChatbots();\n          set({\n            orgChatbots: chatbots,\n            loading: false,\n            connectionStatus: \"connected\",\n          });\n        } catch (error) {\n          const isDevelopment = process.env.NODE_ENV === 'development';\n          const isConnectionError = error instanceof Error && (\n            error.message.includes(\"Unable to connect\") ||\n            error.message.includes(\"Backend server unavailable\") ||\n            error.message.includes(\"ECONNREFUSED\") ||\n            error.message.includes(\"Not authenticated\")\n          );\n\n          // Check if this is likely an initial load error (no chatbots loaded yet)\n          const currentState = get();\n          const isInitialLoad = !currentState.orgChatbots || currentState.orgChatbots.length === 0;\n\n          if (isDevelopment && isConnectionError && isInitialLoad) {\n            // In development, suppress error messages during initial load\n            console.debug(\"Initial load - chatbots loading failed (likely auth in progress)\");\n            set({\n              loading: false,\n              connectionStatus: \"disconnected\",\n            });\n            return; // Don't set error state for initial load failures\n          }\n\n          if (isDevelopment && isConnectionError) {\n            // In development, just log a warning for connection errors\n            console.warn(\"Chatbots loading failed - backend server not available\");\n          } else {\n            console.error(\"Error loading chatbots:\", error);\n          }\n\n          set({\n            error: isConnectionError ? \"Backend server unavailable\" : \"Failed to load chatbots\",\n            loading: false,\n            connectionStatus: \"disconnected\",\n          });\n\n          // Only show toast for unexpected errors, not connection issues in development\n          if (!isDevelopment || !isConnectionError) {\n            toast.error(\"Failed to load chatbots. Please check your connection.\");\n          }\n        }\n      },\n\n      loadUploads: async () => {\n        try {\n          const uploads = await uploadsApi.getUploads();\n          set({ uploads, connectionStatus: \"connected\" });\n        } catch (error) {\n          const isDevelopment = process.env.NODE_ENV === 'development';\n          const isConnectionError = error instanceof Error && (\n            error.message.includes(\"Unable to connect\") ||\n            error.message.includes(\"Backend server unavailable\") ||\n            error.message.includes(\"ECONNREFUSED\")\n          );\n\n          if (isDevelopment && isConnectionError) {\n            console.warn(\"Uploads loading failed - backend server not available\");\n          } else {\n            console.error(\"Error loading uploads:\", error);\n          }\n\n          set({\n            error: isConnectionError ? \"Backend server unavailable\" : \"Failed to load uploads\",\n            connectionStatus: \"disconnected\",\n          });\n\n          if (!isDevelopment || !isConnectionError) {\n            toast.error(\"Failed to load knowledge base files.\");\n          }\n        }\n      },\n\n      loadContextConfig: async () => {\n        try {\n          const response = await conversationApi.getContextConfig();\n          if (response && response.success) {\n            set({\n              contextConfig: response.config,\n              connectionStatus: \"connected\",\n            });\n          }\n        } catch (error) {\n          console.error(\"Error loading context config:\", error);\n          set({\n            error: \"Failed to load context configuration\",\n            connectionStatus: \"disconnected\",\n          });\n          toast.error(\"Failed to load AI configuration.\");\n        }\n      },\n\n      loadPerformanceMetrics: async (days = 7) => {\n        try {\n          set({ analyticsLoading: true });\n          const metrics = await conversationApi.getAnalyticsDashboard(days);\n          set({\n            performanceMetrics: metrics,\n            analyticsLoading: false,\n            connectionStatus: \"connected\",\n          });\n        } catch (error) {\n          console.error(\"Error loading performance metrics:\", error);\n          set({\n            performanceMetrics: null,\n            analyticsLoading: false,\n            error: \"Failed to load analytics\",\n            connectionStatus: \"disconnected\",\n          });\n          // Don't show error toast for analytics as it's not critical\n        }\n      },\n\n      createChatbot: async (config) => {\n        try {\n          set({ saving: true, error: null });\n          const chatbot = await chatbotApi.createChatbot(config);\n          set((state) => ({\n            orgChatbots: [...state.orgChatbots, chatbot],\n            selectedChatbot: chatbot,\n            saving: false,\n            showCreateForm: false,\n            isEditMode: true,\n            connectionStatus: \"connected\",\n          }));\n          toast.success(\"Chatbot created successfully!\");\n          return chatbot;\n        } catch (error) {\n          console.error(\"Error creating chatbot:\", error);\n          set({\n            saving: false,\n            error: \"Failed to create chatbot\",\n            connectionStatus: \"disconnected\",\n          });\n\n          const errorMessage =\n            error instanceof Error\n              ? error.message\n              : \"Failed to create chatbot. Please try again.\";\n          toast.error(errorMessage);\n          return null;\n        }\n      },\n\n      updateChatbot: async (chatbotId, config) => {\n        try {\n          set({ saving: true, error: null });\n          const updatedChatbot = await chatbotApi.updateChatbot(\n            chatbotId,\n            config\n          );\n          set((state) => ({\n            orgChatbots: state.orgChatbots.map((bot) =>\n              bot.id === chatbotId ? updatedChatbot : bot\n            ),\n            selectedChatbot: updatedChatbot,\n            saving: false,\n            connectionStatus: \"connected\",\n          }));\n          toast.success(\"Chatbot updated successfully!\");\n          return updatedChatbot;\n        } catch (error) {\n          console.error(\"Error updating chatbot:\", error);\n          set({\n            saving: false,\n            error: \"Failed to update chatbot\",\n            connectionStatus: \"disconnected\",\n          });\n\n          const errorMessage =\n            error instanceof Error\n              ? error.message\n              : \"Failed to update chatbot. Please try again.\";\n          toast.error(errorMessage);\n          return null;\n        }\n      },\n\n      deleteChatbot: async (chatbotId) => {\n        try {\n          set({ deletingChatbotId: chatbotId, error: null });\n          await chatbotApi.deleteChatbot(chatbotId);\n          set((state) => ({\n            orgChatbots: state.orgChatbots.filter(\n              (bot) => bot.id !== chatbotId\n            ),\n            selectedChatbot:\n              state.selectedChatbot?.id === chatbotId\n                ? null\n                : state.selectedChatbot,\n            deletingChatbotId: null,\n            connectionStatus: \"connected\",\n          }));\n          toast.success(\"Chatbot deleted successfully!\");\n        } catch (error) {\n          console.error(\"Error deleting chatbot:\", error);\n          set({\n            deletingChatbotId: null,\n            error: \"Failed to delete chatbot\",\n            connectionStatus: \"disconnected\",\n          });\n          toast.error(\"Failed to delete chatbot. Please try again.\");\n        }\n      },\n\n      saveContextConfig: async (updates) => {\n        try {\n          set({ saving: true, error: null });\n          const response = await conversationApi.updateContextConfig(updates);\n\n          if (response && response.success) {\n            set((state) => ({\n              contextConfig: { ...state.contextConfig, ...updates },\n              saving: false,\n              connectionStatus: \"connected\",\n            }));\n            toast.success(\"Context configuration updated successfully!\");\n          } else {\n            throw new Error(response?.message || \"Save failed\");\n          }\n        } catch (error) {\n          console.error(\"Error saving context config:\", error);\n          set({\n            saving: false,\n            error: \"Failed to update context configuration\",\n            connectionStatus: \"disconnected\",\n          });\n\n          const errorMessage =\n            error instanceof Error\n              ? `Failed to save: ${error.message}`\n              : \"Failed to update context configuration. Please try again.\";\n          toast.error(errorMessage);\n        }\n      },\n\n      uploadFile: async (file, type) => {\n        try {\n          set({ uploading: true, error: null });\n          const uploadResult = await uploadsApi.uploadFile(file, type);\n          set((state) => ({\n            uploads: [...state.uploads, uploadResult],\n            uploading: false,\n            connectionStatus: \"connected\",\n          }));\n          toast.success(\"File uploaded successfully!\");\n          return uploadResult;\n        } catch (error) {\n          console.error(\"Error uploading file:\", error);\n          set({\n            uploading: false,\n            error: \"Failed to upload file\",\n            connectionStatus: \"disconnected\",\n          });\n          toast.error(\"Failed to upload file. Please try again.\");\n          return null;\n        }\n      },\n\n      testConnection: async () => {\n        try {\n          set({ connectionStatus: \"checking\" });\n          // First try a simple health check without auth\n          try {\n            const healthResponse = await conversationApi.getHealthCheck();\n            if (healthResponse) {\n              // If basic health check passes, try authenticated connection\n              const result = await conversationApi.testConnection();\n              const isConnected = result.success;\n              set({\n                connectionStatus: isConnected ? \"connected\" : \"disconnected\",\n              });\n              return isConnected;\n            }\n          } catch (healthError) {\n            console.warn(\n              \"Health check failed, trying direct connection test:\",\n              healthError\n            );\n          }\n\n          // Fall back to direct authenticated test\n          const result = await conversationApi.testConnection();\n          const isConnected = result.success;\n          set({ connectionStatus: isConnected ? \"connected\" : \"disconnected\" });\n          return isConnected;\n        } catch (error) {\n          console.error(\"Connection test failed:\", error);\n          set({ connectionStatus: \"disconnected\" });\n          return false;\n        }\n      },\n\n      generateEmbedCode: (chatbotId) => {\n        const API_BASE =\n          process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8001\";\n        const embedScript = `<script>\n  (function() {\n    var script = document.createElement('script');\n    script.src = '${window.location.origin}/chatbot-widget.js';\n    script.setAttribute('data-chatbot-id', '${chatbotId}');\n    script.setAttribute('data-api-url', '${API_BASE}');\n    document.head.appendChild(script);\n  })();\n</script>`;\n        set({ embedCode: embedScript, showEmbedModal: true });\n        return embedScript;\n      },\n\n      initializeStore: async (retryCount = 0) => {\n        const maxRetries = 3;\n        try {\n          set({ loading: true, error: null, connectionStatus: \"checking\" });\n\n          // Test connection first with timeout and retry logic\n          let connectionResult;\n          try {\n            connectionResult = await get().testConnection();\n          } catch (connectionError) {\n            console.warn(\n              \"Initial connection test failed, attempting to continue:\",\n              connectionError\n            );\n            // Continue with initialization even if connection test fails\n            connectionResult = false;\n          }\n\n          // Load all data in parallel with individual error handling\n          const results = await Promise.allSettled([\n            chatbotApi.getChatbots(),\n            uploadsApi.getUploads(),\n            conversationApi.getContextConfig(),\n          ]);\n\n          let hasAnySuccess = false;\n          let criticalFailures = 0;\n\n          // Handle chatbots result (critical for basic functionality)\n          if (results[0].status === \"fulfilled\") {\n            set({ orgChatbots: results[0].value });\n            hasAnySuccess = true;\n          } else {\n            console.error(\"Failed to load chatbots:\", results[0].reason);\n            criticalFailures++;\n          }\n\n          // Handle uploads result (non-critical)\n          if (results[1].status === \"fulfilled\") {\n            set({ uploads: results[1].value });\n            hasAnySuccess = true;\n          } else {\n            console.warn(\n              \"Failed to load uploads (non-critical):\",\n              results[1].reason\n            );\n          }\n\n          // Handle context config result (non-critical, has defaults)\n          if (\n            results[2].status === \"fulfilled\" &&\n            results[2].value &&\n            results[2].value.success\n          ) {\n            // Ensure loaded config has proper org_id\n            const loadedConfig = {\n              ...results[2].value.config,\n              org_id:\n                results[2].value.config.org_id || `user_${Date.now()}_org`,\n            };\n            set({ contextConfig: loadedConfig });\n            console.debug(\"✅ Context config loaded successfully\");\n            hasAnySuccess = true;\n          } else {\n            // Context config failed to load - this is expected if backend is not available\n            console.debug(\n              \"🔧 Context config not available, using built-in defaults\"\n            );\n            // Ensure default config has proper org_id\n            const defaultConfigWithOrgId = {\n              ...defaultContextConfig,\n              org_id: `user_${Date.now()}_org`,\n            };\n            set({ contextConfig: defaultConfigWithOrgId });\n          }\n\n          // Determine if initialization was successful enough\n          if (hasAnySuccess && criticalFailures === 0) {\n            set({\n              loading: false,\n              connectionStatus: connectionResult ? \"connected\" : \"partial\",\n              error: null,\n            });\n            if (!connectionResult) {\n              toast.warning(\n                \"Some features may be limited due to connectivity issues\"\n              );\n            }\n          } else if (\n            hasAnySuccess &&\n            criticalFailures > 0 &&\n            retryCount < maxRetries\n          ) {\n            // Partial success but critical failures - retry\n            console.log(\n              `Retrying initialization (${\n                retryCount + 1\n              }/${maxRetries}) due to critical failures`\n            );\n            await new Promise((resolve) =>\n              setTimeout(resolve, Math.pow(2, retryCount) * 1000)\n            );\n            return get().initializeStore(retryCount + 1);\n          } else if (!hasAnySuccess && retryCount < maxRetries) {\n            // Complete failure - retry\n            console.log(\n              `Retrying initialization (${\n                retryCount + 1\n              }/${maxRetries}) due to complete failure`\n            );\n            await new Promise((resolve) =>\n              setTimeout(resolve, Math.pow(2, retryCount) * 1000)\n            );\n            return get().initializeStore(retryCount + 1);\n          } else {\n            // Final failure after retries\n            throw new Error(\n              `Failed to load critical application data after ${\n                retryCount + 1\n              } attempts`\n            );\n          }\n        } catch (error) {\n          console.error(\"Error initializing store:\", error);\n          const isRetryable =\n            retryCount < maxRetries &&\n            error instanceof Error &&\n            (error.message.includes(\"network\") ||\n              error.message.includes(\"timeout\") ||\n              error.message.includes(\"fetch\"));\n\n          if (isRetryable) {\n            console.log(\n              `Retrying initialization (${\n                retryCount + 1\n              }/${maxRetries}) after error:`,\n              error.message\n            );\n            await new Promise((resolve) =>\n              setTimeout(resolve, Math.pow(2, retryCount) * 1500)\n            );\n            return get().initializeStore(retryCount + 1);\n          } else {\n            set({\n              loading: false,\n              error: `Failed to initialize application${\n                retryCount > 0 ? ` after ${retryCount + 1} attempts` : \"\"\n              }`,\n              connectionStatus: \"disconnected\",\n            });\n            toast.error(\n              \"Failed to initialize application. Please check your connection and try refreshing the page.\"\n            );\n          }\n        }\n      },\n\n      resetState: () =>\n        set(\n          {\n            loading: true,\n            saving: false,\n            activeTab: \"basic\",\n            showCreateForm: false,\n            showEmbedModal: false,\n            isEditMode: false,\n            analyticsLoading: false,\n            uploading: false,\n            currentUser: null,\n            error: null,\n            connectionStatus: \"checking\",\n            orgChatbots: [],\n            selectedChatbot: null,\n            uploads: [],\n            embedCode: \"\",\n            performanceMetrics: null,\n            conversations: [],\n            deletingChatbotId: null,\n            contextConfig: defaultContextConfig,\n            config: defaultConfig,\n            chatMessages: [],\n            currentConversationId: null,\n          },\n          false,\n          \"resetState\"\n        ),\n    }),\n    { name: \"customize-store\" }\n  )\n);\n\n// Export convenience hooks for accessing specific parts of the store\nexport const useCustomizeLoading = () =>\n  useCustomizeStore((state) => state.loading);\nexport const useCustomizeSaving = () =>\n  useCustomizeStore((state) => state.saving);\nexport const useCustomizeActiveTab = () =>\n  useCustomizeStore((state) => state.activeTab);\nexport const useCustomizeCurrentUser = () =>\n  useCustomizeStore((state) => state.currentUser);\nexport const useCustomizeOrgChatbots = () =>\n  useCustomizeStore((state) => state.orgChatbots);\nexport const useCustomizeSelectedChatbot = () =>\n  useCustomizeStore((state) => state.selectedChatbot);\nexport const useCustomizeUploads = () =>\n  useCustomizeStore((state) => state.uploads);\nexport const useCustomizeContextConfig = () =>\n  useCustomizeStore((state) => state.contextConfig);\nexport const useCustomizeConfig = () =>\n  useCustomizeStore((state) => state.config);\nexport const useCustomizePerformanceMetrics = () =>\n  useCustomizeStore((state) => state.performanceMetrics);\nexport const useCustomizeConnectionStatus = () =>\n  useCustomizeStore((state) => state.connectionStatus);\n\n// Export compound selectors for common use cases\nexport const useCustomizeActions = () =>\n  useCustomizeStore((state) => ({\n    setLoading: state.setLoading,\n    setSaving: state.setSaving,\n    setActiveTab: state.setActiveTab,\n    updateConfig: state.updateConfig,\n    updateContextConfig: state.updateContextConfig,\n    testConnection: state.testConnection,\n  }));\n\nexport const useCustomizeUIState = () =>\n  useCustomizeStore((state) => ({\n    loading: state.loading,\n    saving: state.saving,\n    activeTab: state.activeTab,\n    showCreateForm: state.showCreateForm,\n    showEmbedModal: state.showEmbedModal,\n    isEditMode: state.isEditMode,\n    analyticsLoading: state.analyticsLoading,\n    connectionStatus: state.connectionStatus,\n  }));\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 680, "column": 0}, "map": {"version":3,"sources":["file:///Users/jithinjacob/Desktop/zaakiy/frontend/src/components/ui/switch.tsx"],"sourcesContent":["import * as React from \"react\";\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Switch = React.forwardRef<\n  React.ComponentRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root> & {\n    thumbClassName?: string;\n  }\n>(({ className, thumbClassName, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-10 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\",\n        thumbClassName\n      )}\n    />\n  </SwitchPrimitives.Root>\n));\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch };\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAEA;;;;;AAEA,MAAM,uBAAS,oPAAgB,CAK7B,CAAC,EAAE,SAAS,EAAE,cAAc,EAAE,GAAG,OAAO,EAAE,oBAC1C,+QAAC,2MAAqB;QACpB,WAAW,IAAA,0JAAE,EACX,sXACA;QAED,GAAG,KAAK;QACT,KAAK;kBAEL,cAAA,+QAAC,4MAAsB;YACrB,WAAW,IAAA,0JAAE,EACX,8KACA;;;;;;;;;;;AAKR,OAAO,WAAW,GAAG,2MAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 714, "column": 0}, "map": {"version":3,"sources":["file:///Users/jithinjacob/Desktop/zaakiy/frontend/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,MAAM,EACb,SAAS,EACT,GAAG,OAC8C;IACjD,qBACE,+QAAC,0MAAmB;QAClB,aAAU;QACV,WAAW,IAAA,0JAAE,EACX,uNACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 741, "column": 0}, "map": {"version":3,"sources":["file:///Users/jithinjacob/Desktop/zaakiy/frontend/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n"],"names":[],"mappings":";;;;;AAEA;;;AAEA,SAAS,SAAS,EAAE,SAAS,EAAE,GAAG,OAAyC;IACzE,qBACE,+QAAC;QACC,aAAU;QACV,WAAW,IAAA,0JAAE,EACX,ucACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 765, "column": 0}, "map": {"version":3,"sources":["file:///Users/jithinjacob/Desktop/zaakiy/frontend/src/components/dashboard/customize/ChatbotConfiguration.tsx"],"sourcesContent":["\"use client\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport { useSearchParams, useParams, useRouter } from \"next/navigation\";\nimport type { ChatbotInfo } from \"@/types/schemaTypes\";\nimport { useCustomizeStore } from \"@/stores/customizeStore\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { chatbotApi } from \"@/app/api/routes\";\nimport { Bot, CheckCircle, Save, AlertTriangle } from \"lucide-react\";\nimport { toast } from \"sonner\";\n// import dynamic from \"next/dynamic\";\n\n// Custom debounce function to avoid lodash dependency\nconst debounce = <T extends (...args: never[]) => void>(\n  func: T,\n  delay: number\n) => {\n  let timeoutId: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func(...args), delay);\n  };\n};\n\nconst TONE_OPTIONS = [\n  {\n    value: \"professional\",\n    label: \"Professional\",\n    icon: \"👔\",\n  },\n  {\n    value: \"friendly\",\n    label: \"Friendly\",\n    icon: \"😊\",\n  },\n  {\n    value: \"helpful\",\n    label: \"Helpful\",\n    icon: \"🤝\",\n  },\n  {\n    value: \"technical\",\n    label: \"Technical\",\n    icon: \"🔧\",\n  },\n  {\n    value: \"casual\",\n    label: \"Casual\",\n    icon: \"💬\",\n  },\n];\n\nconst COLOR_PRESETS = [\n  \"#6a8fff\",\n  \"#10B981\",\n  \"#8B5CF6\",\n  \"#F59E0B\",\n  \"#EF4444\",\n  \"#06B6D4\",\n  \"#84CC16\",\n  \"#EC4899\",\n  \"#6366F1\",\n  \"#14B8A6\",\n  \"#F97316\",\n  \"#8B5A2B\",\n];\n\ninterface ChatbotConfigurationProps {\n  className?: string;\n}\n\nexport default function ChatbotConfiguration({}: ChatbotConfigurationProps) {\n  const searchParams = useSearchParams();\n  const router = useRouter();\n  const { userId } = useParams();\n  const chatbotId = searchParams.get(\"id\");\n\n  // Local state for validation and preview\n  const [validationErrors, setValidationErrors] = useState<string[]>([]);\n  const [unsavedChanges, setUnsavedChanges] = useState(false);\n\n  const {\n    // State\n    saving,\n    currentUser,\n    selectedChatbot,\n    isEditMode,\n    config,\n\n    // Actions\n    setSaving,\n    setOrgChatbots,\n    setSelectedChatbot,\n    setIsEditMode,\n    setShowCreateForm,\n    setConfig,\n    updateConfig,\n  } = useCustomizeStore();\n\n  // Enhanced validation function\n  const validateConfig = useCallback((config: ChatbotInfo): string[] => {\n    const errors: string[] = [];\n\n    if (!config.name?.trim()) errors.push(\"Chatbot name is required\");\n    if (config.name && config.name.length > 50)\n      errors.push(\"Name must be under 50 characters\");\n    if (!config.greeting_message?.trim())\n      errors.push(\"Greeting message is required\");\n    if (config.greeting_message && config.greeting_message.length > 200) {\n      errors.push(\"Greeting message must be under 200 characters\");\n    }\n    if (!config.fallback_message?.trim())\n      errors.push(\"Fallback message is required\");\n\n    return errors;\n  }, []);\n\n  // Individual input states for immediate UI feedback\n  const [inputValues, setInputValues] = useState({\n    name: config.name || \"\",\n    description: config.description || \"\",\n    greeting_message: config.greeting_message || \"\",\n    fallback_message: config.fallback_message || \"\",\n    behavior: config.behavior || \"\",\n    system_prompt: config.system_prompt || \"\",\n    color_hex: config.color_hex || \"#3B82F6\",\n  });\n\n  // Load configuration from chatbot\n  const loadConfigFromChatbot = useCallback(\n    (chatbot: ChatbotInfo) => {\n      setConfig({\n        ...chatbot,\n        description: chatbot.description || \"\",\n        color_hex: chatbot.color_hex || \"#6a8fff\",\n        tone: chatbot.tone || \"helpful\",\n        behavior: chatbot.behavior || \"Be helpful and informative\",\n        system_prompt: chatbot.system_prompt || \"\",\n        greeting_message:\n          chatbot.greeting_message || \"Hello! How can I help you today?\",\n        fallback_message:\n          chatbot.fallback_message ||\n          \"I'm sorry, I don't have information about that. Could you please rephrase your question?\",\n        ai_model_config: {\n          model: \"gpt-3.5-turbo\",\n          temperature: 0.7,\n          max_tokens: 1000,\n        },\n        is_active: chatbot.status === \"active\",\n      } satisfies ChatbotInfo);\n\n      // Clear unsaved changes when loading from existing chatbot\n      setUnsavedChanges(false);\n      setValidationErrors([]);\n    },\n    [setConfig, setUnsavedChanges, setValidationErrors]\n  );\n\n  // Load organization chatbots\n  const loadOrgChatbots = useCallback(async () => {\n    try {\n      const chatbots = await chatbotApi.getChatbots();\n      setOrgChatbots(chatbots);\n\n      if (chatbotId) {\n        // Edit mode: load the specific chatbot\n        const targetChatbot = chatbots.find((bot) => bot.id === chatbotId);\n        if (targetChatbot) {\n          setSelectedChatbot(targetChatbot);\n          loadConfigFromChatbot(targetChatbot);\n          setIsEditMode(true);\n          setShowCreateForm(false);\n        } else {\n          // Chatbot not found, redirect to create mode\n          toast.error(\"Chatbot not found\");\n          router.push(`/dashboard/${userId}/customize`);\n        }\n      } else if (chatbots.length > 0) {\n        // Create mode: load first chatbot as template\n        setSelectedChatbot(chatbots[0]);\n        loadConfigFromChatbot(chatbots[0]);\n        setIsEditMode(false);\n        setShowCreateForm(true);\n      } else {\n        // No chatbots exist, show create form\n        setShowCreateForm(true);\n        setIsEditMode(false);\n      }\n    } catch (error) {\n      console.error(\"Error loading organization chatbots:\", error);\n      toast.error(\"Failed to load chatbots\");\n    }\n  }, [\n    chatbotId,\n    setOrgChatbots,\n    setSelectedChatbot,\n    setIsEditMode,\n    setShowCreateForm,\n    router,\n    userId,\n    loadConfigFromChatbot,\n  ]);\n\n  // Load chatbots when component mounts or chatbotId changes\n  useEffect(() => {\n    loadOrgChatbots();\n  }, [loadOrgChatbots]);\n\n  // Update input values when config changes from store\n  React.useEffect(() => {\n    console.log(\"🔄 Updating input values from config:\", {\n      configId: config.id,\n      configName: config.name,\n      isEditMode,\n      chatbotId,\n    });\n\n    setInputValues({\n      name: config.name || \"\",\n      description: config.description || \"\",\n      greeting_message: config.greeting_message || \"\",\n      fallback_message: config.fallback_message || \"\",\n      behavior: config.behavior || \"\",\n      system_prompt: config.system_prompt || \"\",\n      color_hex: config.color_hex || \"#3B82F6\",\n    });\n  }, [config, config.id, isEditMode, chatbotId]);\n\n  // Create individual debounced update functions\n  const createDebouncedUpdate = useCallback(\n    (field: keyof ChatbotInfo) => {\n      return debounce((value: string | boolean) => {\n        updateConfig({ [field]: value } as Partial<ChatbotInfo>);\n        setUnsavedChanges(true);\n\n        // Validate\n        const newConfig = { ...config, [field]: value };\n        const errors = validateConfig(newConfig);\n        setValidationErrors(errors);\n      }, 300);\n    },\n    [updateConfig, validateConfig, config]\n  );\n\n  // Individual debounced functions for each field\n  const debouncedUpdates = React.useMemo(\n    () => ({\n      name: createDebouncedUpdate(\"name\"),\n      description: createDebouncedUpdate(\"description\"),\n      greeting_message: createDebouncedUpdate(\"greeting_message\"),\n      fallback_message: createDebouncedUpdate(\"fallback_message\"),\n      behavior: createDebouncedUpdate(\"behavior\"),\n      system_prompt: createDebouncedUpdate(\"system_prompt\"),\n      color_hex: createDebouncedUpdate(\"color_hex\"),\n      is_active: createDebouncedUpdate(\"is_active\"),\n      tone: createDebouncedUpdate(\"tone\"),\n    }),\n    [createDebouncedUpdate]\n  );\n\n  // Handle input changes\n  const handleInputChange = useCallback(\n    (field: keyof typeof inputValues, value: string) => {\n      // Update local input state immediately\n      setInputValues((prev) => ({ ...prev, [field]: value }));\n      // Debounce the store update\n      debouncedUpdates[field]?.(value);\n    },\n    [debouncedUpdates]\n  );\n\n  // Handle non-text field changes (switches, selects)\n  const handleFieldChange = useCallback(\n    (field: keyof ChatbotInfo, value: string | boolean) => {\n      updateConfig({ [field]: value } as Partial<ChatbotInfo>);\n      setUnsavedChanges(true);\n\n      const newConfig = { ...config, [field]: value };\n      const errors = validateConfig(newConfig);\n      setValidationErrors(errors);\n    },\n    [updateConfig, validateConfig, config]\n  );\n\n  // Enhanced save function with better error handling\n  const handleSave = async () => {\n    try {\n      setSaving(true);\n\n      // Validate configuration first\n      const errors = validateConfig(config);\n      if (errors.length > 0) {\n        toast.error(`Please fix validation errors: ${errors.join(\", \")}`);\n        setValidationErrors(errors);\n        return;\n      }\n\n      const chatbotData: ChatbotInfo = {\n        id: selectedChatbot?.id || \"\",\n        name: config.name,\n        description: config.description,\n        color_hex: config.color_hex,\n        tone: config.tone,\n        behavior: config.behavior,\n        greeting_message: config.greeting_message,\n        status: config.is_active ? \"active\" : \"inactive\",\n        user_id: currentUser?.id || \"\",\n        org_id: currentUser?.user_metadata?.org_id,\n        system_prompt: config.system_prompt,\n        fallback_message: config.fallback_message,\n        chain_status: selectedChatbot?.chain_status || \"pending\",\n        trainer_at: selectedChatbot?.trainer_at || new Date().toISOString(),\n        created_at: selectedChatbot?.created_at || new Date().toISOString(),\n        ai_model_config: config.ai_model_config || {\n          model: \"gpt-3.5-turbo\",\n          temperature: 0.7,\n          max_tokens: 1000,\n        },\n        deployment_config: selectedChatbot?.deployment_config || {\n          url: \"\",\n          headers: {},\n          method: \"\",\n        },\n        is_active: config.is_active,\n      };\n\n      console.log(\"💾 Attempting to save chatbot:\", {\n        isEditMode,\n        chatbotId: selectedChatbot?.id,\n        chatbotData,\n        currentUser: currentUser\n          ? { id: currentUser.id, org_id: currentUser.user_metadata?.org_id }\n          : null,\n      });\n\n      let savedChatbot: ChatbotInfo;\n\n      if (isEditMode && selectedChatbot?.id) {\n        console.log(\"🔄 Updating existing chatbot:\", selectedChatbot.id);\n        savedChatbot = await chatbotApi.updateChatbot(\n          selectedChatbot.id,\n          chatbotData\n        );\n        toast.success(\"Chatbot updated successfully!\");\n      } else {\n        console.log(\"✨ Creating new chatbot\");\n        savedChatbot = await chatbotApi.createChatbot(chatbotData);\n        toast.success(\"Chatbot created successfully!\");\n        setIsEditMode(true);\n        setShowCreateForm(false);\n        setSelectedChatbot(savedChatbot);\n        router.push(`/dashboard/${userId}/customize?id=${savedChatbot.id}`);\n      }\n\n      // Clear unsaved changes flag\n      setUnsavedChanges(false);\n      setValidationErrors([]);\n\n      // After successful save, refresh the data\n      await loadOrgChatbots();\n    } catch (error) {\n      console.error(\"❌ Error saving chatbot:\", error);\n\n      let errorMessage = \"Failed to save chatbot configuration\";\n\n      if (error instanceof Error) {\n        console.error(\"🔍 Error details:\", {\n          message: error.message,\n          stack: error.stack,\n          name: error.name,\n        });\n\n        if (\n          error.message.includes(\"401\") ||\n          error.message.includes(\"Authentication\")\n        ) {\n          errorMessage = \"Authentication failed. Please log in again.\";\n        } else if (error.message.includes(\"403\")) {\n          errorMessage = \"Permission denied. Check your access rights.\";\n        } else if (error.message.includes(\"404\")) {\n          errorMessage =\n            \"Backend endpoint not found. Check if server is running on http://localhost:8001\";\n        } else if (error.message.includes(\"500\")) {\n          errorMessage = \"Server error. Please try again later.\";\n        } else if (\n          error.message.includes(\"Network\") ||\n          error.message.includes(\"fetch\") ||\n          error.message.includes(\"Failed to fetch\")\n        ) {\n          errorMessage =\n            \"Cannot connect to server. Is the backend running on http://localhost:8001?\";\n        } else {\n          errorMessage = `Save failed: ${error.message}`;\n        }\n      }\n\n      toast.error(errorMessage);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // Enhanced preview functionality\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bot className=\"w-5 h-5\" />\n            Advanced Chatbot Configuration\n            {unsavedChanges && (\n              <Badge variant=\"secondary\" className=\"ml-2\">\n                Unsaved Changes\n              </Badge>\n            )}\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <Switch\n              checked={config.is_active}\n              onCheckedChange={(checked) =>\n                handleFieldChange(\"is_active\", checked)\n              }\n            />\n            <Label className=\"text-sm\">Active</Label>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        {/* Validation Errors */}\n        {validationErrors.length > 0 && (\n          <Alert className=\"mb-4 border-red-200 bg-red-50\">\n            <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n            <AlertDescription>\n              <strong>Please fix the following errors:</strong>\n              <ul className=\"mt-2 list-disc list-inside\">\n                {validationErrors.map((error, index) => (\n                  <li key={index} className=\"text-sm text-red-700\">\n                    {error}\n                  </li>\n                ))}\n              </ul>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Single tab for chatbot configuration - context engineering moved to separate AI page */}\n        <div className=\"w-full\">\n          {/* Chatbot Configuration Form */}\n          <div className=\"space-y-4\">\n            <div className=\"my-7 grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"name\">Chatbot Name</Label>\n                <Input\n                  id=\"name\"\n                  value={inputValues.name}\n                  onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                  placeholder=\"Enter chatbot name...\"\n                  className=\"mt-4\"\n                />\n              </div>\n            </div>\n\n            <div className=\"my-7\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={inputValues.description}\n                onChange={(e) =>\n                  handleInputChange(\"description\", e.target.value)\n                }\n                placeholder=\"Describe what this chatbot does and its purpose...\"\n                className=\"mt-4\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"my-7\">\n              <Label>Personality & Tone</Label>\n              <div className=\"mt-4 grid grid-cols-5 gap-3\">\n                {TONE_OPTIONS.map((option) => (\n                  <div\n                    key={option.value}\n                    className={`p-2 border rounded-lg cursor-pointer transition-all ${\n                      config.tone === option.value\n                        ? \"border-blue-500 bg-blue-50\"\n                        : \"border-gray-200 hover:border-gray-300\"\n                    }`}\n                    onClick={() => handleFieldChange(\"tone\", option.value)}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <span className=\"text-xl\">{option.icon}</span>\n                      <div>\n                        <div className=\"font-medium\">{option.label}</div>\n                      </div>\n                      {config.tone === option.value && (\n                        <CheckCircle className=\"h-5 w-5 text-green-600 ml-auto\" />\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"my-9\">\n              <Label>Primary Color</Label>\n              <div className=\"mt-2\">\n                <div className=\"flex gap-2 mb-3 flex-wrap\">\n                  {COLOR_PRESETS.map((color) => (\n                    <button\n                      key={color}\n                      className={`w-6 h-6 rounded-full border-2 ${\n                        config.color_hex === color\n                          ? \"border-gray-900 scale-110\"\n                          : \"border-gray-200 hover:border-gray-400\"\n                      } transition-all`}\n                      style={{ backgroundColor: color }}\n                      onClick={() => handleFieldChange(\"color_hex\", color)}\n                    />\n                  ))}\n                </div>\n                <Input\n                  type=\"color\"\n                  value={inputValues.color_hex}\n                  onChange={(e) =>\n                    handleInputChange(\"color_hex\", e.target.value)\n                  }\n                  className=\"w-20 h-10\"\n                />\n              </div>\n            </div>\n\n            <div className=\"my-7 grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"greeting\">Greeting Message</Label>\n                <Textarea\n                  id=\"greeting\"\n                  value={inputValues.greeting_message}\n                  onChange={(e) =>\n                    handleInputChange(\"greeting_message\", e.target.value)\n                  }\n                  placeholder=\"Hello! How can I help you today?\"\n                  className=\"mt-4\"\n                  rows={2}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"fallback\">Fallback Message</Label>\n                <Textarea\n                  id=\"fallback\"\n                  value={inputValues.fallback_message}\n                  onChange={(e) =>\n                    handleInputChange(\"fallback_message\", e.target.value)\n                  }\n                  placeholder=\"I'm sorry, I don't have information about that...\"\n                  className=\"mt-4\"\n                  rows={2}\n                />\n              </div>\n            </div>\n            <div className=\"my-9\">\n              <Label htmlFor=\"behavior\">Behavior & Personality</Label>\n              <Textarea\n                id=\"behavior\"\n                value={inputValues.behavior}\n                onChange={(e) => handleInputChange(\"behavior\", e.target.value)}\n                placeholder=\"Describe how the chatbot should behave, its personality, and interaction style...\"\n                className=\"mt-4\"\n                rows={4}\n              />\n            </div>\n\n            <div className=\"my-9\">\n              <Label htmlFor=\"system-prompt\">System Prompt (Advanced)</Label>\n              <Textarea\n                id=\"system-prompt\"\n                value={inputValues.system_prompt}\n                onChange={(e) =>\n                  handleInputChange(\"system_prompt\", e.target.value)\n                }\n                placeholder=\"You are a helpful assistant that...\"\n                className=\"mt-1\"\n                rows={6}\n              />\n              <p className=\"text-sm text-gray-500 mt-4\">\n                Define specific instructions for the AI. This overrides default\n                behavior settings.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Enhanced Save Section */}\n        <div className=\"flex justify-between mt-6 pt-6 border-t\">\n          <Button\n            onClick={handleSave}\n            disabled={saving || validationErrors.length > 0}\n            className=\"pointer flex items-center gap-2 min-w-[150px]\"\n          >\n            {saving ? (\n              <>\n                <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                Saving...\n              </>\n            ) : (\n              <>\n                <Save className=\"w-4 h-4\" />\n                {isEditMode ? \"Update Chatbot\" : \"Create Chatbot\"}\n              </>\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1647, "column": 0}, "map": {"version":3,"sources":["file:///Users/jithinjacob/Desktop/zaakiy/frontend/src/app/dashboard/%5BuserId%5D/customize/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useCallback, useState } from \"react\";\nimport { useSearchParams, useParams, useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport {\n  Bot,\n  Upload,\n  Copy,\n  ExternalLink,\n  Plus,\n  ArrowLeft,\n  Settings,\n  BarChart3,\n  AlertTriangle,\n  Trash2,\n  WifiOff,\n  Wifi,\n  RefreshCw,\n  RotateCcw,\n} from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/lib/supabase\";\nimport { useCustomizeStore } from \"@/stores/customizeStore\";\nimport { chatbotApi } from \"@/app/api/routes\";\nimport type { ChatbotInfo } from \"@/types/schemaTypes\";\nimport ChatbotConfiguration from \"@/components/dashboard/customize/ChatbotConfiguration\";\n\nexport default function EnhancedCustomizePage() {\n  const searchParams = useSearchParams();\n  const { userId } = useParams();\n  const router = useRouter();\n  const chatbotId = searchParams.get(\"id\");\n\n  // Local state for advanced features\n  const [retryCount, setRetryCount] = useState(0);\n  const [lastConnectionCheck, setLastConnectionCheck] = useState<Date | null>(\n    null\n  );\n\n  // Zustand store\n  const {\n    loading,\n    orgChatbots,\n    selectedChatbot,\n    showCreateForm,\n    uploads,\n    embedCode,\n    showEmbedModal,\n    deletingChatbotId,\n    contextConfig,\n    connectionStatus,\n    error,\n    // Actions\n    setCurrentUser,\n    setSelectedChatbot,\n    setIsEditMode,\n    setShowCreateForm,\n    setActiveTab,\n    setShowEmbedModal,\n    deleteChatbot: deleteChatbotFromStore,\n    generateEmbedCode: generateEmbedCodeFromStore,\n    initializeStore,\n    testConnection,\n    setError,\n  } = useCustomizeStore();\n\n  const loadSpecificChatbot = useCallback(\n    async (chatbotId: string) => {\n      try {\n        const chatbot = await chatbotApi.getChatbot(chatbotId);\n        setSelectedChatbot(chatbot);\n      } catch (error) {\n        console.error(\"Error loading specific chatbot:\", error);\n        toast.error(\"Failed to load chatbot configuration\");\n      }\n    },\n    [setSelectedChatbot]\n  );\n\n  // Enhanced connection testing\n  const checkConnection = useCallback(async () => {\n    try {\n      const isConnected = await testConnection();\n      setLastConnectionCheck(new Date());\n      if (!isConnected && retryCount < 3) {\n        setRetryCount((prev) => prev + 1);\n        // Auto-retry after a delay\n        setTimeout(() => {\n          checkConnection();\n        }, 2000 * Math.pow(2, retryCount)); // Exponential backoff\n      } else if (isConnected) {\n        setRetryCount(0);\n        setError(null);\n      }\n    } catch (error) {\n      console.error(\"Connection check failed:\", error);\n    }\n  }, [testConnection, retryCount, setError]);\n\n  const initializePage = useCallback(async () => {\n    try {\n      // Get current user session\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      if (!session?.user) {\n        toast.error(\"Please log in to access this page\");\n        router.push(\"/auth/login\");\n        return;\n      }\n\n      setCurrentUser(session.user);\n\n      // Initialize store with all data\n      try {\n        await initializeStore();\n        console.debug(\"✅ Application initialized successfully\");\n      } catch (storeError) {\n        console.warn(\"⚠️ Some features may not be available:\", storeError);\n        // Don't show error to user since the app can work with defaults\n      }\n\n      // If chatbotId in URL, load that specific chatbot\n      if (chatbotId) {\n        await loadSpecificChatbot(chatbotId);\n        setIsEditMode(true);\n      }\n    } catch (error) {\n      console.error(\"Error initializing page:\", error);\n      setError(\n        \"Failed to initialize the application. Please refresh the page.\"\n      );\n    }\n  }, [\n    initializeStore,\n    setCurrentUser,\n    setIsEditMode,\n    chatbotId,\n    router,\n    loadSpecificChatbot,\n    setError,\n  ]);\n\n  // Load initial data\n  useEffect(() => {\n    initializePage();\n  }, [initializePage]);\n\n  // Periodic connection check\n  useEffect(() => {\n    if (connectionStatus === \"disconnected\") {\n      const interval = setInterval(checkConnection, 30000); // Check every 30 seconds\n      return () => clearInterval(interval);\n    }\n  }, [connectionStatus, checkConnection]);\n\n  // Handle chatbot selection\n  const handleChatbotSelect = (chatbot: ChatbotInfo) => {\n    setSelectedChatbot(chatbot);\n    setIsEditMode(true);\n    setShowCreateForm(false);\n    router.push(`/dashboard/${userId}/customize?id=${chatbot.id}`);\n  };\n\n  // Handle create new chatbot\n  const handleCreateNew = () => {\n    setSelectedChatbot(null);\n    setIsEditMode(false);\n    setShowCreateForm(true);\n    router.push(`/dashboard/${userId}/customize`);\n  };\n\n  const handleDeleteChatbot = async (\n    chatbotId: string,\n    chatbotName: string\n  ) => {\n    if (\n      !confirm(\n        `Are you sure you want to delete \"${chatbotName}\"? This action cannot be undone.`\n      )\n    ) {\n      return;\n    }\n\n    await deleteChatbotFromStore(chatbotId);\n\n    // If the deleted chatbot was selected, clear selection\n    if (selectedChatbot?.id === chatbotId) {\n      setSelectedChatbot(null);\n      setIsEditMode(false);\n      setShowCreateForm(false);\n      router.push(`/dashboard/${userId}/customize`);\n    }\n  };\n\n  const handleGenerateEmbedCode = () => {\n    if (!selectedChatbot?.id) {\n      toast.error(\"Please save the chatbot first\");\n      return;\n    }\n    generateEmbedCodeFromStore(selectedChatbot.id);\n  };\n\n  const copyEmbedCode = () => {\n    navigator.clipboard.writeText(embedCode);\n    toast.success(\"Embed code copied to clipboard!\");\n  };\n\n  // Enhanced retry mechanism\n  const handleRetryConnection = async () => {\n    setRetryCount(0);\n    await checkConnection();\n    if (connectionStatus === \"disconnected\") {\n      await initializePage();\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto w-full max-w-7xl px-4 py-8\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"h-32 bg-gray-200 rounded\"></div>\n            <div className=\"h-32 bg-gray-200 rounded\"></div>\n            <div className=\"h-32 bg-gray-200 rounded\"></div>\n          </div>\n          <div className=\"h-96 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mx-auto ml-[4.5vw] h-[98vh] overflow-y-scroll bg-white rounded-3xl p-8 \">\n      {/* Connection Status Banner */}\n      {connectionStatus === \"disconnected\" && (\n        <Alert className=\"mb-6 border-red-200 bg-red-50\">\n          <WifiOff className=\"h-4 w-4 text-red-600\" />\n          <AlertDescription className=\"flex items-center justify-between\">\n            <div>\n              <strong>Connection Lost:</strong> Unable to connect to the backend\n              services.\n              {lastConnectionCheck && (\n                <span className=\"text-sm text-red-600 ml-2\">\n                  Last checked: {lastConnectionCheck.toLocaleTimeString()}\n                </span>\n              )}\n            </div>\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={handleRetryConnection}\n              className=\"ml-4\"\n            >\n              <RefreshCw className=\"w-4 h-4 mr-1\" />\n              Retry ({retryCount}/3)\n            </Button>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Error Banner */}\n      {error && (\n        <Alert className=\"mb-6 border-orange-200 bg-orange-50\">\n          <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n          <AlertDescription>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <strong>Error:</strong> {error}\n                {error.includes(\"Failed to initialize application\") && (\n                  <div className=\"mt-2 text-sm text-orange-700\">\n                    This may be due to network issues or server problems. Try\n                    the actions below:\n                  </div>\n                )}\n              </div>\n              {error.includes(\"Failed to initialize application\") && (\n                <div className=\"flex gap-2 ml-4\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => initializeStore()}\n                    className=\"text-orange-700 border-orange-300 hover:bg-orange-100\"\n                  >\n                    <RefreshCw className=\"w-4 h-4 mr-1\" />\n                    Retry Initialize\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setError(null);\n                      window.location.reload();\n                    }}\n                    className=\"text-orange-700 border-orange-300 hover:bg-orange-100\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-1\" />\n                    Refresh Page\n                  </Button>\n                </div>\n              )}\n            </div>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Enhanced Header with Performance Overview */}\n      <div className=\"pb-3\">\n        <div className=\"flex pb-3 items-center justify-between\">\n          <div>\n            <div className=\"flex items-center gap-3\">\n              <h1 className=\"font text-3xl font-bold\">AI Chatbot Management</h1>\n              {connectionStatus === \"connected\" && (\n                <div className=\"flex items-center gap-1 text-green-600\">\n                  <Wifi className=\"w-4 h-4\" />\n                  <span className=\"text-sm\">Connected</span>\n                </div>\n              )}\n              {connectionStatus === \"checking\" && (\n                <div className=\"flex items-center gap-1 text-yellow-600\">\n                  <RefreshCw className=\"w-4 h-4 animate-spin\" />\n                  <span className=\"text-sm\">Checking...</span>\n                </div>\n              )}\n            </div>\n            <p className=\"text-gray-600 mt-1\">\n              Create, configure, optimize, and monitor your AI assistants\n            </p>\n          </div>\n          <Button\n            onClick={handleCreateNew}\n            className=\"flex items-center gap-2\"\n            disabled={connectionStatus === \"disconnected\"}\n          >\n            <Plus className=\"w-4 h-4\" />\n            Create New Chatbot\n          </Button>\n        </div>\n\n        {/* Organization Chatbots List */}\n        {orgChatbots.length > 0 && !showCreateForm && (\n          <Card className=\"mb-6 border-1 bg-white\">\n            <CardHeader>\n              <CardTitle className=\"font text-lg flex items-center gap-2\">\n                <Bot className=\"font w-5 h-5\" />\n                Your Organization&apos;s Chatbots\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {orgChatbots.map((chatbot) => (\n                  <div\n                    key={chatbot.id}\n                    className={`p-4 border rounded-lg cursor-pointer transition-all hover:shadow-md ${\n                      selectedChatbot?.id === chatbot.id\n                        ? \"border-blue-500 bg-blue-50\"\n                        : \"border-gray-200 hover:border-gray-300\"\n                    }`}\n                    onClick={() => handleChatbotSelect(chatbot)}\n                  >\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h3 className=\"font-medium truncate\">{chatbot.name}</h3>\n                      <Badge\n                        variant={\n                          chatbot.status === \"active\" ? \"default\" : \"secondary\"\n                        }\n                        className=\"ml-2\"\n                      >\n                        {chatbot.status}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n                      {chatbot.description || \"No description\"}\n                    </p>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-4 h-4 rounded-full\"\n                          style={{\n                            backgroundColor: chatbot.color_hex || \"#3B82F6\",\n                          }}\n                        />\n                        <span className=\"text-xs text-gray-500 capitalize\">\n                          {chatbot.tone || \"helpful\"}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            window.open(\n                              `/dashboard/chat?chatbot=${chatbot.id}`,\n                              \"_blank\"\n                            );\n                          }}\n                          title=\"Test Chatbot\"\n                        >\n                          <ExternalLink className=\"w-3 h-3\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleDeleteChatbot(chatbot.id, chatbot.name);\n                          }}\n                          disabled={deletingChatbotId === chatbot.id}\n                          className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                          title=\"Delete Chatbot\"\n                        >\n                          {deletingChatbotId === chatbot.id ? (\n                            <div className=\"w-3 h-3 animate-spin rounded-full border-2 border-red-600 border-t-transparent\" />\n                          ) : (\n                            <Trash2 className=\"w-3 h-3\" />\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Create New Chatbot Prompt */}\n        {orgChatbots.length === 0 && !loading && (\n          <Card className=\"mb-6 border-dashed border-2\">\n            <CardContent className=\"text-center py-12\">\n              <Bot className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">No Chatbots Yet</h3>\n              <p className=\"font mb-4\">\n                Create your first chatbot to get started with AI-powered\n                customer support.\n              </p>\n              <Button\n                onClick={handleCreateNew}\n                className=\"flex items-center gap-2\"\n                disabled={connectionStatus === \"disconnected\"}\n              >\n                <Plus className=\"w-4 h-4\" />\n                Create Your First Chatbot\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Chatbot Configuration Form */}\n      {(selectedChatbot || showCreateForm) && (\n        <div>\n          <div className=\"flex items-center justify-between pb-6\">\n            <div className=\"flex items-center gap-4\">\n              {!showCreateForm && (\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSelectedChatbot(null);\n                    setIsEditMode(false);\n                    router.push(`/dashboard/${userId}/customize`);\n                  }}\n                  className=\"pointer flex items-center gap-2 hover:bg-[#5D7DDE] hover:text-white\"\n                >\n                  <ArrowLeft className=\"w-4 h-4\" />\n                  Back to List\n                </Button>\n              )}\n              <h2 className=\"text-2xl font-bold\">\n                {showCreateForm\n                  ? \"Create New Chatbot\"\n                  : `Edit: ${selectedChatbot?.name}`}\n              </h2>\n            </div>\n\n            {selectedChatbot && !showCreateForm && (\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() =>\n                    window.open(\n                      `/dashboard/chat?chatbot=${selectedChatbot.id}`,\n                      \"_blank\"\n                    )\n                  }\n                  className=\"flex items-center gap-2\"\n                >\n                  <ExternalLink className=\"w-4 h-4\" />\n                  Test Chatbot\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() =>\n                    handleDeleteChatbot(\n                      selectedChatbot.id,\n                      selectedChatbot.name\n                    )\n                  }\n                  disabled={deletingChatbotId === selectedChatbot.id}\n                  className=\"flex items-center gap-2 text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200 hover:border-red-300\"\n                >\n                  {deletingChatbotId === selectedChatbot.id ? (\n                    <div className=\"w-4 h-4 animate-spin rounded-full border-2 border-red-600 border-t-transparent\" />\n                  ) : (\n                    <Trash2 className=\"w-4 h-4\" />\n                  )}\n                  Delete Chatbot\n                </Button>\n              </div>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n            <div className=\"xl:col-span-3\">\n              <ChatbotConfiguration />\n            </div>\n\n            {/* Enhanced Sidebar */}\n            <div className=\"space-y-6\">\n              {/* Training Data Status - Enhanced */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    📊 Knowledge Base\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">\n                        Total documents:\n                      </span>\n                      <Badge variant=\"outline\">{uploads.length}</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">\n                        Active sources:\n                      </span>\n                      <Badge\n                        variant=\"outline\"\n                        className=\"bg-green-50 text-green-700\"\n                      >\n                        {uploads.filter((u) => u.status === \"completed\").length}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Processing:</span>\n                      <Badge\n                        variant=\"outline\"\n                        className=\"bg-orange-50 text-orange-700\"\n                      >\n                        {\n                          uploads.filter((u) => u.status === \"processing\")\n                            .length\n                        }\n                      </Badge>\n                    </div>\n\n                    <div className=\"pt-2\">\n                      <Progress\n                        value={\n                          (uploads.filter((u) => u.status === \"completed\")\n                            .length /\n                            Math.max(uploads.length, 1)) *\n                          100\n                        }\n                        className=\"mb-3\"\n                      />\n                    </div>\n\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"w-full\"\n                      onClick={() => router.push(`/dashboard/${userId}/train`)}\n                    >\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      Manage Knowledge Base\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Context Engine Status */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    🧠 Context Engine Status\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Model Tier:</span>\n                      <Badge variant=\"secondary\" className=\"capitalize\">\n                        {contextConfig.model_tier}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Strategy:</span>\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {contextConfig.retrieval_strategy}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">\n                        Quality Checks:\n                      </span>\n                      <Badge\n                        variant={\n                          contextConfig.enable_hallucination_check\n                            ? \"default\"\n                            : \"secondary\"\n                        }\n                      >\n                        {contextConfig.enable_hallucination_check\n                          ? \"Enabled\"\n                          : \"Disabled\"}\n                      </Badge>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"w-full\"\n                      onClick={() => setActiveTab(\"context\")}\n                    >\n                      <Settings className=\"w-4 h-4 mr-2\" />\n                      Configure Engine\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Deployment Card - Enhanced */}\n              <Card className=\"bg-gradient-to-br from-rose-50 to-pink-50 border-rose-200\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    🚀 Deployment\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Your chatbot is optimized and ready for deployment. Generate\n                    embed code for websites or integrate via API.\n                  </p>\n                  <div className=\"space-y-2\">\n                    <Button\n                      size=\"sm\"\n                      className=\"w-full\"\n                      onClick={handleGenerateEmbedCode}\n                      disabled={!selectedChatbot?.id}\n                    >\n                      Generate Embed Code\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"w-full\"\n                      onClick={() => setActiveTab(\"analytics\")}\n                    >\n                      <BarChart3 className=\"w-4 h-4 mr-2\" />\n                      View Analytics\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Embed Code Modal */}\n      {showEmbedModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 max-w-2xl w-full mx-4\">\n            <h3 className=\"text-lg font-semibold mb-4\">Embed Code</h3>\n            <p className=\"text-sm text-gray-600 mb-3\">\n              Copy this code and paste it into your website where you want the\n              chatbot to appear:\n            </p>\n            <div className=\"bg-gray-100 p-4 rounded-lg mb-4\">\n              <pre className=\"text-sm overflow-x-auto whitespace-pre-wrap\">\n                {embedCode}\n              </pre>\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowEmbedModal(false)}\n              >\n                Close\n              </Button>\n              <Button\n                onClick={copyEmbedCode}\n                className=\"flex items-center gap-2\"\n              >\n                <Copy className=\"w-4 h-4\" />\n                Copy Code\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AAEA;AA9BA;;;;;;;;;;;;;;;AAgCe,SAAS;IACtB,MAAM,eAAe,IAAA,sLAAe;IACpC,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,gLAAS;IAC5B,MAAM,SAAS,IAAA,gLAAS;IACxB,MAAM,YAAY,aAAa,GAAG,CAAC;IAEnC,oCAAoC;IACpC,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,kPAAQ,EAAC;IAC7C,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,IAAA,kPAAQ,EAC5D;IAGF,gBAAgB;IAChB,MAAM,EACJ,OAAO,EACP,WAAW,EACX,eAAe,EACf,cAAc,EACd,OAAO,EACP,SAAS,EACT,cAAc,EACd,iBAAiB,EACjB,aAAa,EACb,gBAAgB,EAChB,KAAK,EACL,UAAU;IACV,cAAc,EACd,kBAAkB,EAClB,aAAa,EACb,iBAAiB,EACjB,YAAY,EACZ,iBAAiB,EACjB,eAAe,sBAAsB,EACrC,mBAAmB,0BAA0B,EAC7C,eAAe,EACf,cAAc,EACd,QAAQ,EACT,GAAG,IAAA,qLAAiB;IAErB,MAAM,sBAAsB,IAAA,qPAAW,EACrC,OAAO;QACL,IAAI;YACF,MAAM,UAAU,MAAM,0KAAU,CAAC,UAAU,CAAC;YAC5C,mBAAmB;QACrB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,mCAAmC;YACjD,kLAAK,CAAC,KAAK,CAAC;QACd;IACF,GACA;QAAC;KAAmB;IAGtB,8BAA8B;IAC9B,MAAM,kBAAkB,IAAA,qPAAW,EAAC;QAClC,IAAI;YACF,MAAM,cAAc,MAAM;YAC1B,uBAAuB,IAAI;YAC3B,IAAI,CAAC,eAAe,aAAa,GAAG;gBAClC,cAAc,CAAC,OAAS,OAAO;gBAC/B,2BAA2B;gBAC3B,WAAW;oBACT;gBACF,GAAG,OAAO,KAAK,GAAG,CAAC,GAAG,cAAc,sBAAsB;YAC5D,OAAO,IAAI,aAAa;gBACtB,cAAc;gBACd,SAAS;YACX;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4BAA4B;QAC5C;IACF,GAAG;QAAC;QAAgB;QAAY;KAAS;IAEzC,MAAM,iBAAiB,IAAA,qPAAW,EAAC;QACjC,IAAI;YACF,2BAA2B;YAC3B,MAAM,EACJ,MAAM,EAAE,OAAO,EAAE,EAClB,GAAG,MAAM,mKAAQ,CAAC,IAAI,CAAC,UAAU;YAClC,IAAI,CAAC,SAAS,MAAM;gBAClB,kLAAK,CAAC,KAAK,CAAC;gBACZ,OAAO,IAAI,CAAC;gBACZ;YACF;YAEA,eAAe,QAAQ,IAAI;YAE3B,iCAAiC;YACjC,IAAI;gBACF,MAAM;gBACN,QAAQ,KAAK,CAAC;YAChB,EAAE,OAAO,YAAY;gBACnB,QAAQ,IAAI,CAAC,0CAA0C;YACvD,gEAAgE;YAClE;YAEA,kDAAkD;YAClD,IAAI,WAAW;gBACb,MAAM,oBAAoB;gBAC1B,cAAc;YAChB;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,SACE;QAEJ;IACF,GAAG;QACD;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,oBAAoB;IACpB,IAAA,mPAAS,EAAC;QACR;IACF,GAAG;QAAC;KAAe;IAEnB,4BAA4B;IAC5B,IAAA,mPAAS,EAAC;QACR,IAAI,qBAAqB,gBAAgB;YACvC,MAAM,WAAW,YAAY,iBAAiB,QAAQ,yBAAyB;YAC/E,OAAO,IAAM,cAAc;QAC7B;IACF,GAAG;QAAC;QAAkB;KAAgB;IAEtC,2BAA2B;IAC3B,MAAM,sBAAsB,CAAC;QAC3B,mBAAmB;QACnB,cAAc;QACd,kBAAkB;QAClB,OAAO,IAAI,CAAC,CAAC,WAAW,EAAE,OAAO,cAAc,EAAE,QAAQ,EAAE,EAAE;IAC/D;IAEA,4BAA4B;IAC5B,MAAM,kBAAkB;QACtB,mBAAmB;QACnB,cAAc;QACd,kBAAkB;QAClB,OAAO,IAAI,CAAC,CAAC,WAAW,EAAE,OAAO,UAAU,CAAC;IAC9C;IAEA,MAAM,sBAAsB,OAC1B,WACA;QAEA,IACE,CAAC,QACC,CAAC,iCAAiC,EAAE,YAAY,gCAAgC,CAAC,GAEnF;YACA;QACF;QAEA,MAAM,uBAAuB;QAE7B,uDAAuD;QACvD,IAAI,iBAAiB,OAAO,WAAW;YACrC,mBAAmB;YACnB,cAAc;YACd,kBAAkB;YAClB,OAAO,IAAI,CAAC,CAAC,WAAW,EAAE,OAAO,UAAU,CAAC;QAC9C;IACF;IAEA,MAAM,0BAA0B;QAC9B,IAAI,CAAC,iBAAiB,IAAI;YACxB,kLAAK,CAAC,KAAK,CAAC;YACZ;QACF;QACA,2BAA2B,gBAAgB,EAAE;IAC/C;IAEA,MAAM,gBAAgB;QACpB,UAAU,SAAS,CAAC,SAAS,CAAC;QAC9B,kLAAK,CAAC,OAAO,CAAC;IAChB;IAEA,2BAA2B;IAC3B,MAAM,wBAAwB;QAC5B,cAAc;QACd,MAAM;QACN,IAAI,qBAAqB,gBAAgB;YACvC,MAAM;QACR;IACF;IAEA,IAAI,SAAS;QACX,qBACE,+QAAC;YAAI,WAAU;sBACb,cAAA,+QAAC;gBAAI,WAAU;;kCACb,+QAAC;wBAAI,WAAU;;;;;;kCACf,+QAAC;wBAAI,WAAU;;0CACb,+QAAC;gCAAI,WAAU;;;;;;0CACf,+QAAC;gCAAI,WAAU;;;;;;0CACf,+QAAC;gCAAI,WAAU;;;;;;;;;;;;kCAEjB,+QAAC;wBAAI,WAAU;;;;;;;;;;;;;;;;;IAIvB;IAEA,qBACE,+QAAC;QAAI,WAAU;;YAEZ,qBAAqB,gCACpB,+QAAC,2KAAK;gBAAC,WAAU;;kCACf,+QAAC,wPAAO;wBAAC,WAAU;;;;;;kCACnB,+QAAC,sLAAgB;wBAAC,WAAU;;0CAC1B,+QAAC;;kDACC,+QAAC;kDAAO;;;;;;oCAAyB;oCAEhC,qCACC,+QAAC;wCAAK,WAAU;;4CAA4B;4CAC3B,oBAAoB,kBAAkB;;;;;;;;;;;;;0CAI3D,+QAAC,6KAAM;gCACL,MAAK;gCACL,SAAQ;gCACR,SAAS;gCACT,WAAU;;kDAEV,+QAAC,8PAAS;wCAAC,WAAU;;;;;;oCAAiB;oCAC9B;oCAAW;;;;;;;;;;;;;;;;;;;YAO1B,uBACC,+QAAC,2KAAK;gBAAC,WAAU;;kCACf,+QAAC,0QAAa;wBAAC,WAAU;;;;;;kCACzB,+QAAC,sLAAgB;kCACf,cAAA,+QAAC;4BAAI,WAAU;;8CACb,+QAAC;;sDACC,+QAAC;sDAAO;;;;;;wCAAe;wCAAE;wCACxB,MAAM,QAAQ,CAAC,qDACd,+QAAC;4CAAI,WAAU;sDAA+B;;;;;;;;;;;;gCAMjD,MAAM,QAAQ,CAAC,qDACd,+QAAC;oCAAI,WAAU;;sDACb,+QAAC,6KAAM;4CACL,MAAK;4CACL,SAAQ;4CACR,SAAS,IAAM;4CACf,WAAU;;8DAEV,+QAAC,8PAAS;oDAAC,WAAU;;;;;;gDAAiB;;;;;;;sDAGxC,+QAAC,6KAAM;4CACL,MAAK;4CACL,SAAQ;4CACR,SAAS;gDACP,SAAS;gDACT,OAAO,QAAQ,CAAC,MAAM;4CACxB;4CACA,WAAU;;8DAEV,+QAAC,8PAAS;oDAAC,WAAU;;;;;;gDAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAWpD,+QAAC;gBAAI,WAAU;;kCACb,+QAAC;wBAAI,WAAU;;0CACb,+QAAC;;kDACC,+QAAC;wCAAI,WAAU;;0DACb,+QAAC;gDAAG,WAAU;0DAA0B;;;;;;4CACvC,qBAAqB,6BACpB,+QAAC;gDAAI,WAAU;;kEACb,+QAAC,2OAAI;wDAAC,WAAU;;;;;;kEAChB,+QAAC;wDAAK,WAAU;kEAAU;;;;;;;;;;;;4CAG7B,qBAAqB,4BACpB,+QAAC;gDAAI,WAAU;;kEACb,+QAAC,8PAAS;wDAAC,WAAU;;;;;;kEACrB,+QAAC;wDAAK,WAAU;kEAAU;;;;;;;;;;;;;;;;;;kDAIhC,+QAAC;wCAAE,WAAU;kDAAqB;;;;;;;;;;;;0CAIpC,+QAAC,6KAAM;gCACL,SAAS;gCACT,WAAU;gCACV,UAAU,qBAAqB;;kDAE/B,+QAAC,2OAAI;wCAAC,WAAU;;;;;;oCAAY;;;;;;;;;;;;;oBAM/B,YAAY,MAAM,GAAG,KAAK,CAAC,gCAC1B,+QAAC,yKAAI;wBAAC,WAAU;;0CACd,+QAAC,+KAAU;0CACT,cAAA,+QAAC,8KAAS;oCAAC,WAAU;;sDACnB,+QAAC,wOAAG;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;0CAIpC,+QAAC,gLAAW;0CACV,cAAA,+QAAC;oCAAI,WAAU;8CACZ,YAAY,GAAG,CAAC,CAAC,wBAChB,+QAAC;4CAEC,WAAW,CAAC,oEAAoE,EAC9E,iBAAiB,OAAO,QAAQ,EAAE,GAC9B,+BACA,yCACJ;4CACF,SAAS,IAAM,oBAAoB;;8DAEnC,+QAAC;oDAAI,WAAU;;sEACb,+QAAC;4DAAG,WAAU;sEAAwB,QAAQ,IAAI;;;;;;sEAClD,+QAAC,2KAAK;4DACJ,SACE,QAAQ,MAAM,KAAK,WAAW,YAAY;4DAE5C,WAAU;sEAET,QAAQ,MAAM;;;;;;;;;;;;8DAGnB,+QAAC;oDAAE,WAAU;8DACV,QAAQ,WAAW,IAAI;;;;;;8DAE1B,+QAAC;oDAAI,WAAU;;sEACb,+QAAC;4DAAI,WAAU;;8EACb,+QAAC;oEACC,WAAU;oEACV,OAAO;wEACL,iBAAiB,QAAQ,SAAS,IAAI;oEACxC;;;;;;8EAEF,+QAAC;oEAAK,WAAU;8EACb,QAAQ,IAAI,IAAI;;;;;;;;;;;;sEAGrB,+QAAC;4DAAI,WAAU;;8EACb,+QAAC,6KAAM;oEACL,MAAK;oEACL,SAAQ;oEACR,SAAS,CAAC;wEACR,EAAE,eAAe;wEACjB,OAAO,IAAI,CACT,CAAC,wBAAwB,EAAE,QAAQ,EAAE,EAAE,EACvC;oEAEJ;oEACA,OAAM;8EAEN,cAAA,+QAAC,uQAAY;wEAAC,WAAU;;;;;;;;;;;8EAE1B,+QAAC,6KAAM;oEACL,MAAK;oEACL,SAAQ;oEACR,SAAS,CAAC;wEACR,EAAE,eAAe;wEACjB,oBAAoB,QAAQ,EAAE,EAAE,QAAQ,IAAI;oEAC9C;oEACA,UAAU,sBAAsB,QAAQ,EAAE;oEAC1C,WAAU;oEACV,OAAM;8EAEL,sBAAsB,QAAQ,EAAE,iBAC/B,+QAAC;wEAAI,WAAU;;;;;6FAEf,+QAAC,qPAAM;wEAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;2CA/DrB,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;oBA4E1B,YAAY,MAAM,KAAK,KAAK,CAAC,yBAC5B,+QAAC,yKAAI;wBAAC,WAAU;kCACd,cAAA,+QAAC,gLAAW;4BAAC,WAAU;;8CACrB,+QAAC,wOAAG;oCAAC,WAAU;;;;;;8CACf,+QAAC;oCAAG,WAAU;8CAA2B;;;;;;8CACzC,+QAAC;oCAAE,WAAU;8CAAY;;;;;;8CAIzB,+QAAC,6KAAM;oCACL,SAAS;oCACT,WAAU;oCACV,UAAU,qBAAqB;;sDAE/B,+QAAC,2OAAI;4CAAC,WAAU;;;;;;wCAAY;;;;;;;;;;;;;;;;;;;;;;;;YASrC,CAAC,mBAAmB,cAAc,mBACjC,+QAAC;;kCACC,+QAAC;wBAAI,WAAU;;0CACb,+QAAC;gCAAI,WAAU;;oCACZ,CAAC,gCACA,+QAAC,6KAAM;wCACL,SAAQ;wCACR,SAAS;4CACP,mBAAmB;4CACnB,cAAc;4CACd,OAAO,IAAI,CAAC,CAAC,WAAW,EAAE,OAAO,UAAU,CAAC;wCAC9C;wCACA,WAAU;;0DAEV,+QAAC,8PAAS;gDAAC,WAAU;;;;;;4CAAY;;;;;;;kDAIrC,+QAAC;wCAAG,WAAU;kDACX,iBACG,uBACA,CAAC,MAAM,EAAE,iBAAiB,MAAM;;;;;;;;;;;;4BAIvC,mBAAmB,CAAC,gCACnB,+QAAC;gCAAI,WAAU;;kDACb,+QAAC,6KAAM;wCACL,SAAQ;wCACR,SAAS,IACP,OAAO,IAAI,CACT,CAAC,wBAAwB,EAAE,gBAAgB,EAAE,EAAE,EAC/C;wCAGJ,WAAU;;0DAEV,+QAAC,uQAAY;gDAAC,WAAU;;;;;;4CAAY;;;;;;;kDAGtC,+QAAC,6KAAM;wCACL,SAAQ;wCACR,SAAS,IACP,oBACE,gBAAgB,EAAE,EAClB,gBAAgB,IAAI;wCAGxB,UAAU,sBAAsB,gBAAgB,EAAE;wCAClD,WAAU;;4CAET,sBAAsB,gBAAgB,EAAE,iBACvC,+QAAC;gDAAI,WAAU;;;;;qEAEf,+QAAC,qPAAM;gDAAC,WAAU;;;;;;4CAClB;;;;;;;;;;;;;;;;;;;kCAOV,+QAAC;wBAAI,WAAU;;0CACb,+QAAC;gCAAI,WAAU;0CACb,cAAA,+QAAC,gNAAoB;;;;;;;;;;0CAIvB,+QAAC;gCAAI,WAAU;;kDAEb,+QAAC,yKAAI;;0DACH,+QAAC,+KAAU;0DACT,cAAA,+QAAC,8KAAS;oDAAC,WAAU;8DAAkC;;;;;;;;;;;0DAIzD,+QAAC,gLAAW;0DACV,cAAA,+QAAC;oDAAI,WAAU;;sEACb,+QAAC;4DAAI,WAAU;;8EACb,+QAAC;oEAAK,WAAU;8EAAwB;;;;;;8EAGxC,+QAAC,2KAAK;oEAAC,SAAQ;8EAAW,QAAQ,MAAM;;;;;;;;;;;;sEAE1C,+QAAC;4DAAI,WAAU;;8EACb,+QAAC;oEAAK,WAAU;8EAAwB;;;;;;8EAGxC,+QAAC,2KAAK;oEACJ,SAAQ;oEACR,WAAU;8EAET,QAAQ,MAAM,CAAC,CAAC,IAAM,EAAE,MAAM,KAAK,aAAa,MAAM;;;;;;;;;;;;sEAG3D,+QAAC;4DAAI,WAAU;;8EACb,+QAAC;oEAAK,WAAU;8EAAwB;;;;;;8EACxC,+QAAC,2KAAK;oEACJ,SAAQ;oEACR,WAAU;8EAGR,QAAQ,MAAM,CAAC,CAAC,IAAM,EAAE,MAAM,KAAK,cAChC,MAAM;;;;;;;;;;;;sEAKf,+QAAC;4DAAI,WAAU;sEACb,cAAA,+QAAC,iLAAQ;gEACP,OACE,AAAC,QAAQ,MAAM,CAAC,CAAC,IAAM,EAAE,MAAM,KAAK,aACjC,MAAM,GACP,KAAK,GAAG,CAAC,QAAQ,MAAM,EAAE,KAC3B;gEAEF,WAAU;;;;;;;;;;;sEAId,+QAAC,6KAAM;4DACL,SAAQ;4DACR,MAAK;4DACL,WAAU;4DACV,SAAS,IAAM,OAAO,IAAI,CAAC,CAAC,WAAW,EAAE,OAAO,MAAM,CAAC;;8EAEvD,+QAAC,iPAAM;oEAAC,WAAU;;;;;;gEAAiB;;;;;;;;;;;;;;;;;;;;;;;;kDAQ3C,+QAAC,yKAAI;;0DACH,+QAAC,+KAAU;0DACT,cAAA,+QAAC,8KAAS;oDAAC,WAAU;8DAAkC;;;;;;;;;;;0DAIzD,+QAAC,gLAAW;0DACV,cAAA,+QAAC;oDAAI,WAAU;;sEACb,+QAAC;4DAAI,WAAU;;8EACb,+QAAC;oEAAK,WAAU;8EAAwB;;;;;;8EACxC,+QAAC,2KAAK;oEAAC,SAAQ;oEAAY,WAAU;8EAClC,cAAc,UAAU;;;;;;;;;;;;sEAG7B,+QAAC;4DAAI,WAAU;;8EACb,+QAAC;oEAAK,WAAU;8EAAwB;;;;;;8EACxC,+QAAC,2KAAK;oEAAC,SAAQ;oEAAU,WAAU;8EAChC,cAAc,kBAAkB;;;;;;;;;;;;sEAGrC,+QAAC;4DAAI,WAAU;;8EACb,+QAAC;oEAAK,WAAU;8EAAwB;;;;;;8EAGxC,+QAAC,2KAAK;oEACJ,SACE,cAAc,0BAA0B,GACpC,YACA;8EAGL,cAAc,0BAA0B,GACrC,YACA;;;;;;;;;;;;sEAGR,+QAAC,6KAAM;4DACL,SAAQ;4DACR,MAAK;4DACL,WAAU;4DACV,SAAS,IAAM,aAAa;;8EAE5B,+QAAC,uPAAQ;oEAAC,WAAU;;;;;;gEAAiB;;;;;;;;;;;;;;;;;;;;;;;;kDAQ7C,+QAAC,yKAAI;wCAAC,WAAU;;0DACd,+QAAC,+KAAU;0DACT,cAAA,+QAAC,8KAAS;oDAAC,WAAU;8DAAkC;;;;;;;;;;;0DAIzD,+QAAC,gLAAW;;kEACV,+QAAC;wDAAE,WAAU;kEAA6B;;;;;;kEAI1C,+QAAC;wDAAI,WAAU;;0EACb,+QAAC,6KAAM;gEACL,MAAK;gEACL,WAAU;gEACV,SAAS;gEACT,UAAU,CAAC,iBAAiB;0EAC7B;;;;;;0EAGD,+QAAC,6KAAM;gEACL,SAAQ;gEACR,MAAK;gEACL,WAAU;gEACV,SAAS,IAAM,aAAa;;kFAE5B,+QAAC,gQAAS;wEAAC,WAAU;;;;;;oEAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAYrD,gCACC,+QAAC;gBAAI,WAAU;0BACb,cAAA,+QAAC;oBAAI,WAAU;;sCACb,+QAAC;4BAAG,WAAU;sCAA6B;;;;;;sCAC3C,+QAAC;4BAAE,WAAU;sCAA6B;;;;;;sCAI1C,+QAAC;4BAAI,WAAU;sCACb,cAAA,+QAAC;gCAAI,WAAU;0CACZ;;;;;;;;;;;sCAGL,+QAAC;4BAAI,WAAU;;8CACb,+QAAC,6KAAM;oCACL,SAAQ;oCACR,SAAS,IAAM,kBAAkB;8CAClC;;;;;;8CAGD,+QAAC,6KAAM;oCACL,SAAS;oCACT,WAAU;;sDAEV,+QAAC,2OAAI;4CAAC,WAAU;;;;;;wCAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAS5C","debugId":null}}]
}